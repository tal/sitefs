#!/usr/bin/env ruby

require 'bundler/setup'
require 'yaml'
require 'slop'
require File.expand_path(File.join(__dir__, '../lib/sitefs'))

include Sitefs

opts = Slop.parse do |o|
  o.banner = "usage: bin/sitefs build|watch|upload [options]"
  o.integer '-p', '--port', 'custom port', default: 8050

  o.bool '-q', '--quiet', 'suppress output (quiet mode)'
  o.string '--config', 'location of config file (default .sitefs-config.yml)'
  o.bool '--clean-manifest', 'remove the manifest file, forces all files to re-upload and removes ability to clean currently generated files'
  o.bool '-h', '--help', 'shows this message'
  o.bool '-f', '--force', 'forces generation or upload even if identical'

  o.on '--version', 'print the version' do
    puts VERSION
    exit
  end
end


if opts[:config]
  unless File.exist?(opts[:config])
    abort "No config file found at #{opts[:config]}"
  end

  config = CommandConfig.from_file(opts[:config])
elsif File.exist?('.sitefs-config.yml')
  config = CommandConfig.from_file('.sitefs-config.yml')
else
  # If no defined config or default config then use default values defined by class
  config = CommandConfig.new({})
end

unless config
  abort "Invalid config file found at #{opts[:config]}"
end

if opts.help?
  puts opts
  exit
end

if opts.clean_manifest?
  config.manifest.clean!
  puts 'Cleaning manifest'
  exit
end

config.port = opts[:port]
config.quiet = opts.quiet?
config.force = opts.force?

possible_actions = %w{clean watch build upload}

args = opts.args.dup

if possible_actions.include?(args.first)
  action = args.shift
else
  action = 'watch'
end

root_path = args.shift || config.root_path

unless root_path
  STDERR.puts 'no path specified in config or params'
  STDERR.puts opts
  abort
end

unless args.empty?
  STDERR.puts 'too many arguments passed'
  STDERR.puts opts
  abort
end

config.root_path = root_path

walker = Walker.new config

case action
when 'build'
  walker.run :write
when 'watch'
  walker.watcher.start
when 'upload'
  walker.run :upload
when 'clean'
  config.manifest.delete_generated
end
